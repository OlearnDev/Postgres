----------- PG_CRON ------------------------------------------

pg_cron is a simple, powerful, and open-source job scheduling extension for PostgreSQL databases. It allows you to schedule periodic SQL commands (like cron jobs in Unix/Linux systems) directly within the PostgreSQL database.

What is pg_cron?
A background worker for PostgreSQL that runs periodic jobs.

Syntax similar to Unix cron but for SQL commands.

Runs inside the database, so it can execute SQL, functions, or procedures natively.

Ideal for:

Automated maintenance (e.g., VACUUM, reindexing).

Data aggregation (e.g., nightly summary tables).

Periodic data cleanup.

Refreshing materialized views.

Sending scheduled reports.

How pg_cron Works
1. Architecture
pg_cron runs as a background worker process in PostgreSQL.

It uses a shared library (pg_cron.so) and is configured via postgresql.conf.

It stores job definitions in the cron.job table (in the postgres database by default).

The cron scheduler checks the job list every minute and executes due jobs.

2. Key Components
cron.job table: Stores jobs (SQL command, schedule, etc.).

pg_cron scheduler: Runs in the background and executes jobs.

PostgreSQL background worker: Integrated with the PostgreSQL process.

3. Scheduling Syntax
Uses standard cron syntax:

text
┌───────────── minute (0 - 59)
│ ┌───────────── hour (0 - 23)
│ │ ┌───────────── day of month (1 - 31)
│ │ │ ┌───────────── month (1 - 12)
│ │ │ │ ┌───────────── day of week (0 - 6) (Sunday=0 or 7)
│ │ │ │ │
* * * * *
Examples:

0 * * * * → Every hour at minute 0.

0 2 * * * → Daily at 2:00 AM.

*/10 * * * * → Every 10 minutes.

How to Install and Use pg_cron
1. Installation
On Debian/Ubuntu:

bash
sudo apt-get install postgresql-XX-pg-cron  # Replace XX with PostgreSQL version
Or compile from source (for custom installations).

2. Enable pg_cron
Add to postgresql.conf:

ini
shared_preload_libraries = 'pg_cron'
cron.database_name = 'postgres'  # Database where pg_cron metadata is stored
Restart PostgreSQL:

bash
sudo systemctl restart postgresql
3. Create Extension
Connect to the database (e.g., postgres) and run:

sql
CREATE EXTENSION pg_cron;
4. Schedule Jobs
Example 1: Vacuum every day at 3:00 AM
sql
SELECT cron.schedule(
    'nightly-vacuum',
    '0 3 * * *',
    'VACUUM ANALYZE my_table'
);
Example 2: Refresh a materialized view every hour
sql
SELECT cron.schedule(
    'refresh-hourly-summary',
    '0 * * * *',
    'REFRESH MATERIALIZED VIEW hourly_summary'
);
Example 3: Delete old data every night
sql
SELECT cron.schedule(
    'cleanup-old-data',
    '0 2 * * *',
    'DELETE FROM logs WHERE created_at < NOW() - INTERVAL ''30 days'''
);
5. Manage Jobs
List all jobs:

sql
SELECT * FROM cron.job;
Unschedule a job:

sql
SELECT cron.unschedule('nightly-vacuum');  -- By job name
SELECT cron.unschedule(123);               -- By job ID
Update a job:

sql
SELECT cron.schedule(
    'nightly-vacuum',
    '0 4 * * *',  -- New time: 4:00 AM
    'VACUUM ANALYZE my_table'
);
Key Features
Run SQL Directly: No need for external scripts.

Transactional: Jobs are stored in a table and can be rolled back.

Logging: Job outputs are logged to PostgreSQL logs (log_min_messages controls visibility).

Concurrency: Multiple jobs can run in parallel (using background workers).

Security: Only superusers (by default) can schedule jobs.

Limitations
No built-in retry mechanism: Failed jobs are logged but not retried automatically.

No job history table: You must check PostgreSQL logs for outputs.

Clock dependency: Relies on the system clock of the PostgreSQL server.

Resource contention: Heavy jobs might impact database performance.

Alternatives to pg_cron
Operating System cron + psql:

bash
# Example cron entry
0 3 * * * psql -d mydb -c "VACUUM ANALYZE my_table"
pgAgent: A more advanced job scheduler for PostgreSQL (GUI available).

External schedulers: Apache Airflow, Celery, or custom scripts.

Use Case Example
Goal: Maintain a daily summary of user activity.

sql
-- Schedule job to run at 11:30 PM daily
SELECT cron.schedule(
    'update-daily-activity',
    '30 23 * * *',
    $$
    INSERT INTO daily_activity_summary (date, active_users, total_actions)
    SELECT
        CURRENT_DATE,
        COUNT(DISTINCT user_id),
        COUNT(*)
    FROM user_actions
    WHERE created_at >= CURRENT_DATE
    $$
);
Conclusion
pg_cron is a lightweight, efficient way to automate periodic tasks inside PostgreSQL. It simplifies maintenance, data aggregation, and cleanup without relying on external tools. However, for complex workflows or error handling, you might need to supplement it with external schedulers.

Would you like help setting it up or writing specific jobs?

